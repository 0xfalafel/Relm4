use gtk::prelude::{BoxExt, ButtonExt, GtkWindowExt, OrientableExt};
use relm4::{
    factory::{DynamicIndex, FactoryComponent, FactoryVecDeque},
    gtk, send, ComponentParts, RelmApp, Sender, SimpleComponent, WidgetPlus,
};

#[derive(Debug)]
struct Counter {
    value: u8,
    index: DynamicIndex,
}

#[derive(Debug)]
enum CounterMsg {
    Increment,
    Decrement,
}

enum CounterOutput {
    SendFront(DynamicIndex),
    MoveUp(DynamicIndex),
    MoveDown(DynamicIndex),
}

struct CounterWidgets {
    label: gtk::Label,
}

impl FactoryComponent<gtk::Box, AppMsg> for Counter {
    type Widgets = CounterWidgets;

    type InitParams = u8;

    type Input = CounterMsg;
    type Output = CounterOutput;

    type Root = gtk::Box;
    type Command = ();
    type CommandOutput = ();

    fn output_to_parent_msg(output: Self::Output) -> Option<AppMsg> {
        Some(match output {
            CounterOutput::SendFront(index) => AppMsg::SendFront(index),
            CounterOutput::MoveUp(index) => AppMsg::MoveUp(index),
            CounterOutput::MoveDown(index) => AppMsg::MoveDown(index),
        })
    }

    fn init_root() -> Self::Root {
        relm4_macros::view! {
            root = gtk::Box {
                set_orientation: gtk::Orientation::Horizontal,
                set_spacing: 10,
            }
        }
        root
    }

    fn init_model(
        value: Self::InitParams,
        index: &DynamicIndex,
        _input: &Sender<Self::Input>,
        _output: &Sender<Self::Output>,
    ) -> Self {
        Self {
            value,
            index: index.clone(),
        }
    }

    fn init_widgets(
        &mut self,
        index: &DynamicIndex,
        root: &Self::Root,
        _returned_widget: &gtk::Widget,
        input: &Sender<Self::Input>,
        output: &Sender<Self::Output>,
    ) -> Self::Widgets {
        relm4_macros::view! {
            label = gtk::Label {
                set_label: &self.value.to_string(),
            }
        }

        relm4_macros::view! {
            add_button = gtk::Button {
                set_label: "+",
                connect_clicked(input) => move |_| {
                    input.send(CounterMsg::Increment)
                }
            }
        }

        relm4_macros::view! {
            remove_button = gtk::Button {
                set_label: "-",
                connect_clicked(input) => move |_| {
                    input.send(CounterMsg::Decrement)
                }
            }
        }

        relm4_macros::view! {
            move_up_button = gtk::Button {
                set_label: "UP",
                connect_clicked(output, index) => move |_| {
                    output.send(CounterOutput::MoveUp(index.clone()))
                }
            }
        }

        relm4_macros::view! {
            move_down_button = gtk::Button {
                set_label: "DOWN",
                connect_clicked(output, index) => move |_| {
                    output.send(CounterOutput::MoveDown(index.clone()))
                }
            }
        }

        relm4_macros::view! {
            to_front_button = gtk::Button {
                set_label: "To start",
                connect_clicked(output, index) => move |_| {
                    output.send(CounterOutput::SendFront(index.clone()))
                }
            }
        }

        root.append(&label);
        root.append(&add_button);
        root.append(&remove_button);
        root.append(&move_up_button);
        root.append(&move_down_button);
        root.append(&to_front_button);

        CounterWidgets { label }
    }

    fn update(
        &mut self,
        msg: Self::Input,
        _input: &Sender<Self::Input>,
        _ouput: &Sender<Self::Output>,
    ) -> Option<Self::Command> {
        match msg {
            CounterMsg::Increment => {
                self.value = self.value.wrapping_add(1);
            }
            CounterMsg::Decrement => {
                self.value = self.value.wrapping_sub(1);
            }
        }
        None
    }

    fn update_view(
        &self,
        widgets: &mut Self::Widgets,
        _input: &Sender<Self::Input>,
        _output: &Sender<Self::Output>,
    ) {
        widgets.label.set_label(&self.value.to_string());
    }
}

struct AppModel {
    created_widgets: u8,
    counters: FactoryVecDeque<gtk::Box, Counter, AppMsg>,
}

#[derive(Debug)]
enum AppMsg {
    AddCounter,
    RemoveCounter,
    SendFront(DynamicIndex),
    MoveUp(DynamicIndex),
    MoveDown(DynamicIndex),
}

#[relm4_macros::component]
impl SimpleComponent for AppModel {
    // AppWidgets is generated by the macro
    type Widgets = AppWidgets;

    type InitParams = u8;

    type Input = AppMsg;
    type Output = ();

    view! {
        gtk::Window {
            set_title: Some("Simple app"),
            set_default_width: 300,
            set_default_height: 100,

            gtk::Box {
                set_orientation: gtk::Orientation::Vertical,
                set_spacing: 5,
                set_margin_all: 5,

                gtk::Button {
                    set_label: "Add counter",
                    connect_clicked(input) => move |_| {
                        send!(input, AppMsg::AddCounter);
                    }
                },

                gtk::Button {
                    set_label: "Remove counter",
                    connect_clicked(input) => move |_| {
                        send!(input, AppMsg::RemoveCounter);
                    }
                },

                append: counter_box = &gtk::Box {
                    set_orientation: gtk::Orientation::Vertical,
                    set_spacing: 5,
                }
            }
        }
    }

    // Initialize the UI.
    fn init_parts(
        counter: Self::InitParams,
        root: &Self::Root,
        input: &Sender<Self::Input>,
        _output: &Sender<Self::Output>,
    ) -> ComponentParts<Self> {
        // Insert the macro codegen here
        let widgets = view_output!();

        let model = AppModel {
            created_widgets: counter,
            counters: FactoryVecDeque::new(widgets.counter_box.clone(), input),
        };

        ComponentParts { model, widgets }
    }

    fn update(
        &mut self,
        msg: Self::Input,
        _input: &Sender<Self::Input>,
        _ouput: &Sender<Self::Output>,
    ) {
        match msg {
            AppMsg::AddCounter => {
                self.counters.push_back(self.created_widgets);
                self.created_widgets = self.created_widgets.wrapping_add(1);
            }
            AppMsg::RemoveCounter => {
                self.counters.pop_back();
            }
            AppMsg::SendFront(index) => {
                if let Some(counter) = self.counters.remove(index.current_index()) {
                    self.counters.push_front(counter.value);
                }
            }
            AppMsg::MoveDown(index) => {
                let index = index.current_index();
                if let Some(counter) = self.counters.remove(index) {
                    self.counters.insert(index + 1, counter.value);
                }
            }
            AppMsg::MoveUp(index) => {
                let index = index.current_index();
                if index != 0 {
                    if let Some(counter) = self.counters.remove(index) {
                        self.counters.insert(index - 1, counter.value);
                    }
                }
            }
        }
        if self.counters.len() > 2 {
            // Testing different stuff...
            self.counters.swap(0, 2);
            let mut counter = self.counters.get_mut(1);
            counter.value = counter.value.wrapping_add(10);
        }
        self.counters.render_changes();
    }
}

fn main() {
    let app: RelmApp<AppModel> = RelmApp::new("relm4.test.simple");
    app.run(0);
}
